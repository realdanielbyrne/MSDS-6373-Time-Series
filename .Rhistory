t = seq(1,length(googl),1)
df = data.frame(x = googl, t = t)
fit = lm(df$x ~ df$t, na.action = na.exclude)
orcuttdf <- data.frame(x = googl, t = t)
t <- seq(1,length(googl),1)
orcuttdf <- data.frame(x = googl, t = t)
fit <- lm(orcuttdf$x ~ orcuttdf$t, na.action = na.exclude)
t <- seq(1,length(googl),1)
orcuttdf <- data.frame(x = googl, t = t)
fit <- lm(x ~ t, data=orcuttdf, na.action = na.exclude)
# 10.13
x = swdelay$arr_delay
t = seq(1,length(x),1)
df = data.frame(x = x, t= t)
fit = lm(x~t, data = df)
summary(fit)
cfit = cochrane.orcutt(fit)
summary(cfit)
# 10.13
x = swdelay$arr_delay
t = seq(1,length(x),1)
# b1 is slope
x = gen.sigplusnoise.wge(100, b0 = 0, b1= 0, phi= .95,sn=21)
t = seq(1,100,1)
df = data.frame(x = x, t= t)
fit = lm(x~t, data = df)
summary(fit)
cfit = cochrane.orcutt(fit)
summary(cfit)
# 10.13
x = swdelay$arr_delay
t = seq(1,length(x),1)
df = data.frame(x = x, t= t)
t <- seq(1,length(googl),1)
orcuttdf <- data.frame(x = googl, t = t)
fit <- lm(x ~ t, data=orcuttdf, na.action = na.exclude)
fit <- lm(x ~ t, data=orcuttdf)
length(t)
summary(orcuttdf)
t <- seq(1,length(googl),1)
orcuttdf <- data.frame(x = googl, t = t)
fit <- lm(x ~ t, data=orcuttdf)
orcuttdf
x
googl
names(googl)
dim(googl)
googl[1]
knitr::opts_chunk$set(echo = TRUE)
library(tswge)
library(tseries)
library(orcutt)
# Get quantmod
if (!require("quantmod")) {
install.packages("quantmod")
library(quantmod)
}
start <- as.Date("2016-01-01")
end <- as.Date("2019-10-01")
getSymbols("GOOGL", src = "yahoo", from = start, to = end)
knitr::opts_chunk$set(echo = TRUE)
library(tswge)
library(tseries)
library(orcutt)
# Get quantmod
if (!require("quantmod")) {
install.packages("quantmod")
library(quantmod)
}
start <- as.Date("2016-01-01")
end <- as.Date("2019-10-01")
getSymbols("GOOGL", src = "yahoo", from = start, to = end)
googl
googl$GOOGL.Close
GOOGL$GOOGL.High
class(GOOGL)
class(googl)
googl$GOOGL.Close
googl
GOOGL
as.data.frame(GOOGL$GOOGL.Close)
t = as.data.frame(GOOGL$GOOGL.Close)
dim(t)
names()
names(googl)
dynlim
z <- read.zoo(googl)
googl
library(z00)
library(zoo)
z <- read.zoo(googl)
fortify.zoo(z, name = "Date")
fortify.zoo(googl, name = "Date")
z <- fortify.zoo(googl, name = "Date")
names(z)
x = z$GOOGL.Close
x
z <- fortify.zoo(googl, name = "Date")
x <- z$GOOGL.Close
t = seq(1,length(x),1)
df = data.frame(x = x, t= t)
fit = lm(x~t, data = df)
summary(fit)
cfit = cochrane.orcutt(fit)
summary(cfit)
aic5.wge(xd1)
amodel = est.arma.wge(xd1,p=2,q=2)
amodel$phi
amodel$theta
amodel$avar
d = 1
getSymbols("AAPL", src = "yahoo", from = start, to = end)
plotts.sample.wge(aapl)
aapl = AAPL$AAPL.Close
plotts.sample.wge(aapl)
ad1 = artrans.wge(aapl,phi.tr = 1)
aic.wge(ad1)
aic5.wge(ad1)
getSymbols("AAPL", src = "yahoo", from = start, to = end)
aapl = AAPL$AAPL.Close
plotts.sample.wge(aapl)
ad1 = artrans.wge(aapl,phi.tr = 1)
aic5.wge(ad1)
sd(ad1)^2
knitr::opts_chunk$set(echo = TRUE)
library(tswge)
library(tseries)
library(orcutt)
# Get quantmod
if (!require("quantmod")) {
install.packages("quantmod")
library(quantmod)
}
start <- as.Date("2016-01-01")
end <- as.Date("2019-10-01")
getSymbols("GOOGL", src = "yahoo", from = start, to = end)
googl
aic5.wge(xd1)
amodel = est.arma.wge(xd1,p=2,q=2)
amodel
xs4 = artrans.wge(googl,phi.tr = c(0,0,0,1),plottr = TRUE)
aic5.wge(xs4)
smodel = est.arma.wge(xs4,p=4,q=1)
est.arma.wge(xs4,p=4,q=1)
z <- fortify.zoo(googl, name = "Date")
x <- z$GOOGL.Close
t = seq(1,length(x),1)
df = data.frame(x = x, t= t)
fit = lm(x~t, data = df)
summary(fit)
cfit = cochrane.orcutt(fit)
summary(cfit)
aic5.wge(ad1)
sd(ad1)^2
knitr::opts_chunk$set(echo = TRUE)
library(tswge)
library(tseries)
library(orcutt)
# Get quantmod
if (!require("quantmod")) {
install.packages("quantmod")
library(quantmod)
}
start <- as.Date("2016-01-01")
end <- as.Date("2019-10-01")
getSymbols("GOOGL", src = "yahoo", from = start, to = end)
knitr::opts_chunk$set(echo = TRUE)
library(tswge)
library(tseries)
library(orcutt)
# Get quantmod
if (!require("quantmod")) {
install.packages("quantmod")
library(quantmod)
}
start <- as.Date("2016-01-01")
end <- as.Date("2019-10-01")
getSymbols("GOOGL", src = "yahoo", from = start, to = end)
googl = GOOGL$GOOGL.Close
plotts.sample.wge(googl)
knitr::opts_chunk$set(echo = TRUE)
library(tswge)
library(tseries)
library(orcutt)
# Get quantmod
if (!require("quantmod")) {
install.packages("quantmod")
library(quantmod)
}
start <- as.Date("2016-01-01")
end <- as.Date("2019-10-01")
getSymbols("GOOGL", src = "yahoo", from = start, to = end)
googl = GOOGL$GOOGL.Close
plotts.sample.wge(googl)
amodel$phi
amodel$theta
amodel$avar
xs4 = artrans.wge(googl,phi.tr = c(0,0,0,1),plottr = TRUE)
aic5.wge(xs4)
smodel = est.arma.wge(xs4,p=4,q=1)
plotts.sample.wge(smodel)
smodel = est.arma.wge(xs4,p=4,q=1)
gen.arima.wge(phi=smodel$phi,theta=smodel$theta)
gen.arima.wge(phi=smodel$phi,theta=smodel$theta,d=1)
gen.arima.wge(100,phi=smodel$phi,theta=smodel$theta,d=1)
fore.aruma.wge(googl,phi=smodel$phi,theta=smodel$theta)
fore.aruma.wge(googl,phi=smodel$phi,theta=smodel$theta, n.ahead = 20, lastn = TRUE)
fore.aruma.wge(googl,phi=smodel$phi,theta=smodel$theta, n.ahead = 40, lastn = TRUE)
u = mean(googl)
u
smodel = est.arma.wge(xs4,p=4,q=1)
xs4 = artrans.wge(googl,phi.tr = c(0,0,0,1),plottr = TRUE)
aic5.wge(xs4)
u = mean(googl)
u
smodel = est.arma.wge(xs4,p=4,q=1)
z <- fortify.zoo(googl, name = "Date")
x <- z$GOOGL.Close
t = seq(1,length(x),1)
df = data.frame(x = x, t= t)
fit = lm(x~t, data = df)
summary(fit)
googl = GOOGL$GOOGL.Close
plotts.sample.wge(googl)
fore.aruma.wge(googl,phi=smodel$phi,theta=smodel$theta,d=1,s=4,lastn=30,n.ahead = TRUE)
smodel = est.arma.wge(xs4,p=4,q=1)
fore.aruma.wge(googl,phi=smodel$phi,theta=smodel$theta,d=1,s=4,lastn=30,n.ahead = TRUE)
data(patemp)
plot(patemp)
plotts.wge(patemp)
knitr::opts_chunk$set(echo = TRUE)
library(tseries)
library(tswge)
library(mosaic)
f <- function(x) as.yearmon(format(x, nsmall = 2), "%Y.%m")
z <- read.csv("SN_m_tot_V2.0.csv", sep = ";", header = FALSE)
ase = function(f,s) {
l = length(f) - 1
ls = length(s)
ase = mean((f - s[(ls - l):ls])^2)
return (ase)
}
plotts.wge(x)
par(mfrow=c(1, 3))
x = z$V4
plotts.sample.wge(x)
plotts.wge(x)
aic5.wge(d10,p=0:20,q=0:10)
d10 = artrans.wge(d,phi.tr = c(0,0,0,0,0,0,0,0,0,1))
d10 = artrans.wge(d,phi.tr = c(0,0,0,0,0,0,0,0,0,1))
f21 = fore.aruma.wge(x,phi=m212$phi,theta=m212$theta,d=1,n.ahead=15*12, lastn = TRUE, limits= FALSE)
f21 = fore.aruma.wge(x,phi=m212$phi,theta=m212$theta,d=1,n.ahead=15*12, lastn = TRUE, limits= FALSE)
f21 = fore.aruma.wge(x,phi=m12$phi,theta=m12$theta,n.ahead=15*12, lastn = TRUE, limits= FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(tseries)
library(tswge)
library(mosaic)
f <- function(x) as.yearmon(format(x, nsmall = 2), "%Y.%m")
z <- read.csv("SN_m_tot_V2.0.csv", sep = ";", header = FALSE)
ase = function(f,s) {
l = length(f) - 1
ls = length(s)
ase = mean((f - s[(ls - l):ls])^2)
return (ase)
}
par(mfrow=c(1, 3))
x = z$V4
plotts.sample.wge(x)
plotts.wge(x)
aic5.wge(x)
aic5.wge(x, type = "bic")
d = artrans.wge(x,phi.tr = 1)
aic5.wge(d)
m41 = est.arma.wge(x,p=4,q=1)
m12 = est.arma.wge(x,p=1,q=2)
m212 = est.arma.wge(d,p=2,q=2)
f = fore.aruma.wge(x,phi=m41$phi,theta=m41$theta,n.ahead=15*12, lastn = TRUE, limits= FALSE)
plotts.wge(x)
ase(f$f,x)
f21 = fore.aruma.wge(x,phi=m12$phi,theta=m12$theta,n.ahead=15*12, lastn = TRUE, limits= FALSE)
par(mfrow=c(1, 2))
plotts.wge(x)
ase(f21$f,x)
f21 = fore.aruma.wge(x,phi=m212$phi,theta=m212$theta,d=1,n.ahead=15*12, lastn = TRUE, limits= FALSE)
par(mfrow=c(1, 2))
plotts.wge(d)
ase(f21$f,x)
ljung.wge(m212$res)
plotts.wge(m212$res)
acf(m212$res)
d10 = artrans.wge(d,phi.tr = c(0,0,0,0,0,0,0,0,0,1))
aic5.wge(d10,p=0:20,q=0:10)
aic5.wge(d10,p=0:10,q=0:5)
d10 = artrans.wge(d,phi.tr = c(0,0,0,0,0,0,0,0,0,1))
aic5.wge(d10)
md10 = est.arma.wge(d10,p=1,q=2)
fd10 = fore.aruma.wge(x,phi=md10$phi,theta=md10$theta,d=1,s=10,n.ahead=15*12, lastn = TRUE, limits= FALSE)
ase(fd10$f,x)
plotts.sample.wge(md10$res)
aic5.wge(d10)
md10 = est.arma.wge(d10,p=1,q=2)
fd10 = fore.aruma.wge(x,phi=md10$phi,theta=md10$theta,d=1,s=10,n.ahead=15*12, lastn = TRUE, limits= FALSE)
ase(fd10$f,x)
plotts.sample.wge(md10$res)
ljung.wge(md10$res)
ljung.wge(model$res)
acf(model$res,lag.max = 50)
spike = read.csv("accuspike.csv")
plotts.sample.wge(spike$Active.Users)
aic5.wge(spike$Active.Users)
pacf(spike$Active.Users)
model = est.arma.wge(spike$Active.Users,p=5,q=1)
plotts.wge(model$res)
acf(model$res,lag.max = 50)
fore.aruma.wge(spike$Active.Users,phi = model$phi,theta = model$theta,s=7,lastn = TRUE,n.ahead=30, limits = FALSE)
d10 = artrans.wge(d,phi.tr = c(0,0,0,0,0,0,0,0,0,1))
aic5.wge(d10)
md10 = est.arma.wge(d10,p=1,q=2)
fd10 = fore.aruma.wge(x,phi=md10$phi,theta=md10$theta,d=1,s=10,n.ahead=15*12, lastn = TRUE, limits= FALSE)
ase(fd10$f,x)
plotts.sample.wge(md10$res)
ljung.wge(md10$res)
ljung.wge(md10$res)
?aic.wge
aic.wge(x)
setwd("~/GitHub/MSDS-6373-Time-Series")
knitr::opts_chunk$set(echo = TRUE)
library(tswge)
library(nnfor)
ss = read.csv("Unit 13/Melanoma_Sunspot.csv")
pol = read.csv("Unit 13/LA_Cmort_Study.csv")
swa = read.csv("Unit 13/swadelay.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tswge)
library(nnfor)
ss = read.csv("Unit 13/Melanoma_Sunspot.csv")
pol = read.csv("Unit 13/LA_Cmort_Study.csv")
swa = read.csv("swadelay.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tswge)
library(nnfor)
ss = read.csv("Unit 13/Melanoma_Sunspot.csv")
pol = read.csv("Unit 13/LA_Cmort_Study.csv")
swa = read.csv("swadelay.csv")
swa = read.csv("Unit 13/swadelay.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tswge)
library(nnfor)
ss = read.csv("Unit 13/Melanoma_Sunspot.csv")
pol = read.csv("Unit 13/LA_Cmort_Study.csv")
swa = read.csv("swadelay.csv")
train = ts(pol$cmort[1:498],frequency = 1)
test =  ts(pol$cmort[499:508],frequency = 1)
set.seed(2)
regs = data.frame(ts(pol$temp,frequency = 1),ts(pol$part,frequency = 1))
fit.mlp = mlp(train, hd.auto.type = "elm", xreg = regs)
fit.mlp
plot(fit.mlp)
fore.mlp = forecast(fit.mlp, h = 10,xreg = regs)
plot(fore.mlp)
ASE = mean((test - fore.mlp$mean)^2)
ASE
test
ASE = mean((test - fore.mlp$mean)^2)
len(test)
ASE = mean((test - fore.mlp$mean)^2)
ASE = mean((test - fore.mlp$mean)^2)
train = ts(pol$cmort[1:498],frequency = 1)
test =  ts(pol$cmort[499:508],frequency = 1)
set.seed(2)
regs = data.frame(temp=ts(pol$temp,frequency = 1),part =ts(pol$part,frequency = 1))
fit.mlp = mlp(train, hd.auto.type = "elm", xreg = regs)
fit.mlp
plot(fit.mlp)
fore.mlp = forecast(fit.mlp, h = 10,xreg = regs)
plot(fore.mlp)
ASE = mean((test - fore.mlp$mean)^2)
ASE
train = ts(pol$cmort[1:498],start=1,frequency = 1)
test =  ts(pol$cmort[499:508],start=499,frequency = 1)
set.seed(2)
regs = data.frame(temp=ts(pol$temp,frequency = 1),part =ts(pol$part,frequency = 1))
fit.mlp = mlp(train, hd.auto.type = "elm", xreg = regs)
fit.mlp
plot(fit.mlp)
fore.mlp = forecast(fit.mlp, h = 10,xreg = regs)
plot(fore.mlp)
ASE = mean((test - fore.mlp$mean)^2)
ASE
# Get quantmod
if (!require("quantmod")) {
install.packages("quantmod")
library(quantmod)
}
start <- as.Date("2016-01-01")
end <- as.Date("2019-10-01")
getSymbols("GOOGL", src = "yahoo", from = start, to = end)
head(googl)
head(GOOGL)
class(train)
class(GOOGL)
GOOGL$GOOGL.Close
head(GOOGL$GOOGL.Close)
googl = ts(GOOGL$GOOGL.Close)
head(googl)
head(GOOGL)
?mlp
example(mlp)
?ts
example(ts)
train = ts(GOOGL$GOOGL.Close[1:nrow(-10)],start=c(2016,1,4),frequency = 1)
train = ts(GOOGL$GOOGL.Close[1:nrow(GOOGL$GOOGL.Close)-10],start=c(2016,1,4),frequency = 1)
nrow(GOOGL$GOOGL.Close)
nrow(GOOGL$GOOGL.Close)-10
train = ts(GOOGL$GOOGL.Close[1:(nrow(GOOGL$GOOGL.Close)-10)],start=c(2016,1,4),frequency = 1)
tail(GOOGL$GOOGL.Close)
tail(GOOGL$GOOGL.Close,10)
train = ts(GOOGL$GOOGL.Close[1:(len-10)],start=c(2016,1,4),frequency = 1)
len = nrow(GOOGL$GOOGL.Close)
train = ts(GOOGL$GOOGL.Close[1:(len-10)],start=c(2016,1,4),frequency = 1)
test =  ts(GOOGL$GOOGL.Close[(len-10):len],start=c(2019,9,17),frequency = 1)
test
summary(test)
fit.mlp = mlp(train, hd.auto.type = "elm")
fit.mlp = mlp(train, hd.auto.type = "elm")
plot(fit.mlp)
fore.mlp = forecast(fit.mlp, h = 10,xreg = regs)
fore.mlp = forecast(fit.mlp, h = 10)
plot(fore.mlp)
ASE = mean((test - fore.mlp$mean)^2)
ASE
head(train)
train = ts(GOOGL$GOOGL.Close[1:(len-10)],start=c(2016,1),frequency = 1)
test =  ts(GOOGL$GOOGL.Close[(len-10):len],start=c(2019,9),frequency = 1)
head(train)
fit.mlp = mlp(GOOGL$GOOGL.Close, hd.auto.type = "elm")
g = as.ts(GOOGL)
head(g)
g = as.ts(GOOGL$GOOGL.Close,start=c(2016,1),frequency=1)
g = ts(GOOGL$GOOGL.Close,start=c(2016,1),frequency=1)
head(g)
g = as.ts(GOOGL$GOOGL.Close,start=c(2016,1))
head(g)
g
g[1]
g = as.ts(GOOGL$GOOGL.Close,start=c(2016,1),frequency=12)
x <- z$GOOGL.Close
x
g = ts(x)
head(g)
g = ts(x,start=c(2016,1))
g
head(g)
head(g$)
head(g)
head(GOOGL$GOOGL.Close)
as.ts(GOOGL$GOOGL.Close)
G=as.ts(GOOGL$GOOGL.Close)
head(G)
?as.ts
?as.ts
x = GOOGL$GOOGL.Close
g = as.ts(x,start=c(2016,1))
head(g)
class(x)
z <- fortify.zoo(x, name = "Date")
z
head(z)
googl = GOOGL$GOOGL.Close
train=ts(z)
head(train)
train=ts(z,start=c(2016,1))
train
googl = GOOGL$GOOGL.Close
z <- fortify.zoo(googl, name = "Date")
set.seed(2)
fit.mlp = mlp(GOOGL$GOOGL.Close, hd.auto.type = "elm")
z <- fortify.zoo(GOOGL, name = "Date")
Z
head(z)
?ts
nrows(z)
nrow(z)
train = ts(z$GOOGL.Close[1:(nrow(z)-10)],start=1,frequency = 1)
test = ts(z$GOOGL.Close[(nrow(z)-10):nrow(z)],start=1,frequency = 1)
regs = data.frame(temp=ts(volume=z$GOOGL.Volume, frequency = 1),high =ts(z$GOOGL.High,frequency = 1),low =ts(z$GOOGL.Low,frequency = 1))
regs = data.frame(volume = ts(z$GOOGL.Volume, frequency = 1),high = ts(z$GOOGL.High,frequency = 1),low = ts(z$GOOGL.Low,frequency = 1))
fit.mlp = mlp(, hd.auto.type = "elm",xreg=regs)
fit.mlp = mlp(train, hd.auto.type = "elm",xreg=regs)
fit.mlp
plot(fit.mlp)
fore.mlp = forecast(fit.mlp, h = 10)
fore.mlp = forecast(fit.mlp, h = 10)
plot(fore.mlp)
fore.mlp = forecast(fit.mlp, h = 10)
googl = GOOGL$GOOGL.Close
z <- fortify.zoo(GOOGL, name = "Date")
train = ts(z$GOOGL.Close[1:(nrow(z)-10)],start=1,frequency = 1)
test = ts(z$GOOGL.Close[(nrow(z)-10):nrow(z)],start=1,frequency = 1)
regs = data.frame(volume = ts(z$GOOGL.Volume, frequency = 1),high = ts(z$GOOGL.High,frequency = 1),low = ts(z$GOOGL.Low,frequency = 1))
set.seed(2)
fit.mlp = mlp(train, hd.auto.type = "elm",xreg=regs)
fit.mlp
plot(fit.mlp)
fore.mlp = forecast(fit.mlp, h = 10)
fore.mlp = forecast(fit.mlp, h = 10,xreg=regs)
plot(fore.mlp)
ASE = mean((test - fore.mlp$mean)^2)
ASE
test = ts(z$GOOGL.Close[(nrow(z)-10):nrow(z)],start=(nrow(z)-10),frequency = 1)
ASE = mean((test - fore.mlp$mean)^2)
ASE
